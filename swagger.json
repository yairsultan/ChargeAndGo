{
  "swagger": "2.0",
  "info": {
    "description": "This is a server for charge and go",
    "version": "1.0.0",
    "title": "Swagger ChargeAndGo",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "tags": [
    {
      "name": "order",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "station",
      "description": "Access to Petstore orders"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/order": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Create new order if station available",
        "operationId": "addOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be register in the station",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Page not found."
          },
          "default": {
            "description": "Unexpected error."
          }
        }
      },
      "put": {
        "tags": [
          "order"
        ],
        "summary": "Update an existing order",
        "operationId": "updateOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Order object that needs to be change date",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Page not found."
          },
          "default": {
            "description": "Unexpected error."
          }
        }
      },
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get order by order id",
        "operationId": "getOrderById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Register new user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRegister"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponse"
            }
          },
          "400": {
            "description": "Invalid parameters supplied.",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponseError"
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Login credentieal",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponse"
            }
          },
          "400": {
            "description": "Invalid parameters supplied.",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponseError"
            }
          }
        }
      }
    },
    "/user/": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user information",
        "description": "",
        "operationId": "getUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Authentication",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserInfoResponse"
            }
          },
          "400": {
            "description": "Unaccepted Error",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponseError"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer Authentication",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UserRegisterResponseError"
            }
          }
        }
      }
    },
    "/station": {
      "post": {
        "tags": [
          "station"
        ],
        "summary": "Create new station",
        "operationId": "addStation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Station object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Station"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Page not found."
          },
          "default": {
            "description": "Unexpected error."
          }
        }
      },
      "put": {
        "tags": [
          "station"
        ],
        "summary": "Update an existing station",
        "operationId": "updateStation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Station object that needs to be changed",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Station"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "404": {
            "description": "Page not found."
          },
          "default": {
            "description": "Unexpected error."
          }
        }
      },
      "get": {
        "tags": [
          "station"
        ],
        "summary": "Get station by order id",
        "operationId": "getStationById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The id that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Station"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "Page not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "stationId": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "type": "number"
        },
        "appointmentDate": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "inProgress",
            "finished"
          ]
        }
      }
    },
    "Station": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "address": {
          "type": "string"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "rating": {
          "type": "number"
        },
        "stationtype": {
          "type": "string",
          "enum": [
            "A",
            "B",
            "C",
            "D"
          ]
        },
        "latitude": {
          "type": "number"
        },
        "longitude": {
          "type": "number"
        },
        "orders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Order"
          }
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "integer",
          "format": "int64"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "UserRegister": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "UserUpdate": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserRegisterResponse": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "object",
          "properties": {
            "msg": {
              "type": "string"
            },
            "jwt": {
              "type": "string"
            }
          }
        }
      }
    },
    "UserRegisterResponseError": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "object",
          "properties": {
            "msg": {
              "type": "string"
            }
          }
        }
      }
    },
    "UserInfoResponse": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "body": {
          "type": "object",
          "properties": {
            "msg": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string"
                },
                "lastName": {
                  "type": "string"
                },
                "email": {
                  "type": "string"
                },
                "phone": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  }
}